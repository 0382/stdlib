#:include "common.fypp"

#:set RANKS = range(3, MAXRANK + 1)


submodule (stdlib_experimental_stats) stdlib_experimental_stats_mean

  use stdlib_experimental_error, only: error_stop
  implicit none

contains

  #:for k1, t1 in REAL_KINDS_TYPES
    module function mean_1_${k1}$_${k1}$(x) result(res)
      ${t1}$, intent(in) :: x(:)
      ${t1}$ :: res

      res = sum(x) / real(size(x, kind = int64), ${k1}$)

    end function mean_1_${k1}$_${k1}$
  #:endfor


  #:for k1, t1 in INT_KINDS_TYPES
    module function mean_1_${k1}$_dp(x) result(res)
      ${t1}$, intent(in) :: x(:)
      real(dp) :: res

      res = sum(real(x, dp)) / real(size(x, kind = int64), dp)

    end function mean_1_${k1}$_dp
  #:endfor


  #:for k1, t1 in REAL_KINDS_TYPES
    module function mean_2_all_${k1}$_${k1}$(x) result(res)
      ${t1}$, intent(in) :: x(:,:)
      ${t1}$ :: res

      res = sum(x) / real(size(x, kind = int64), ${k1}$)

    end function mean_2_all_${k1}$_${k1}$
  #:endfor


  #:for k1, t1 in INT_KINDS_TYPES
    module function mean_2_all_${k1}$_dp(x) result(res)
      ${t1}$, intent(in) :: x(:,:)
      real(dp) :: res

      res = sum(real(x, dp)) / real(size(x, kind = int64), dp)

    end function mean_2_all_${k1}$_dp
  #:endfor


  #:for k1, t1 in REAL_KINDS_TYPES
    module function mean_2_${k1}$_${k1}$(x, dim) result(res)
      ${t1}$, intent(in) :: x(:,:)
      integer, intent(in) :: dim
      ${t1}$ :: res(merge(size(x, 1), size(x, 2), mask = 1 < dim ))

      select case(dim)
      case(1)
        res = sum(x, 1) / real(size(x, 1), ${k1}$)
      case(2)
        res = sum(x, 2) / real(size(x, 2), ${k1}$)
      case default
        call error_stop("ERROR (mean): wrong dimension")
      end select

    end function mean_2_${k1}$_${k1}$
  #:endfor


  #:for k1, t1 in INT_KINDS_TYPES
    module function mean_2_${k1}$_dp(x, dim) result(res)
      ${t1}$, intent(in) :: x(:,:)
      integer, intent(in) :: dim
      real(dp) :: res(merge(size(x, 1), size(x, 2), mask = 1 < dim ))

      select case(dim)
      case(1)
        res = sum(real(x, dp), 1) / real(size(x, 1), dp)
      case(2)
        res = sum(real(x, dp), 2) / real(size(x, 2), dp)
      case default
        call error_stop("ERROR (mean): wrong dimension")
      end select

    end function mean_2_${k1}$_dp
  #:endfor


  #:for k1, t1 in REAL_KINDS_TYPES
    #:for rank in RANKS
      module function mean_${rank}$_all_${k1}$_${k1}$(x) result(res)
        ${t1}$, intent(in) :: x${ranksuffix(rank)}$
        ${t1}$ :: res

        res = sum(x) / real(size(x, kind = int64), ${k1}$)

      end function mean_${rank}$_all_${k1}$_${k1}$
    #:endfor
  #:endfor


  #:for k1, t1 in INT_KINDS_TYPES
    #:for rank in RANKS
      module function mean_${rank}$_all_${k1}$_dp(x) result(res)
        ${t1}$, intent(in) :: x${ranksuffix(rank)}$
        real(dp) :: res

        res = sum(real(x, dp)) / real(size(x, kind = int64), dp)

      end function mean_${rank}$_all_${k1}$_dp
    #:endfor
  #:endfor


  #:for k1, t1 in REAL_KINDS_TYPES
    #:for rank in RANKS
      module function mean_${rank}$_${k1}$_${k1}$(x, dim) result(res)
        ${t1}$, intent(in) :: x${ranksuffix(rank)}$
        integer, intent(in) :: dim
        ${t1}$ :: res( &
          #:for imerge in range(1,rank-1)
            merge(size(x,${imerge}$),size(x,${imerge + 1}$),&
              & mask = ${imerge}$ < dim ), &
          #:endfor
            & merge(size(x,${rank-1}$),size(x,${rank}$),&
            & mask = ${rank-1}$ < dim ))

        select case(dim)
        #:for fi in range(1,rank+1)
          case(${fi}$)
            res=sum(x, ${fi}$) / real(size(x, ${fi}$), ${k1}$)
        #:endfor
        case default
          call error_stop("ERROR (mean): wrong dimension")
        end select

      end function mean_${rank}$_${k1}$_${k1}$
    #:endfor
  #:endfor


  #:for k1, t1 in INT_KINDS_TYPES
    #:for rank in RANKS
      module function mean_${rank}$_${k1}$_dp(x, dim) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          integer, intent(in) :: dim
          real(dp) :: res( &
          #:for imerge in range(1,rank-1)
              & merge(size(x, ${imerge}$), size(x, ${imerge + 1}$),&
              & mask = ${imerge}$ < dim ), &
          #:endfor
              & merge(size(x,${rank-1}$),size(x,${rank}$),&
              & mask = ${rank-1}$ < dim ))

          select case(dim)
           #:for fi in range(1,rank+1)
             case(${fi}$)
               res = sum(real(x, dp), ${fi}$) / real(size(x, ${fi}$), dp)
           #:endfor
           case default
             call error_stop("ERROR (mean): wrong dimension")
          end select

      end function mean_${rank}$_${k1}$_dp
    #:endfor
  #:endfor

end submodule
