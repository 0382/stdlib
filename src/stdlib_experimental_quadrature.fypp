#:include "common.fypp"
#:set WEIGHT_FUNS = ["sin", "cos", "pole"]
#:set QUAD_OK = False
module stdlib_experimental_quadrature
    use stdlib_experimental_kinds, only: sp, dp, qp

    implicit none

    private

    ! array integration
    public :: trapz
    public :: trapz_weights
    public :: simps
    public :: simps_weights

    ! automatic integration of (weighted) functions
    #:if QUAD_OK
    public :: quad
    public :: weight_t
    #:for WFUN in WEIGHT_FUNS
    public :: ${WFUN}$_weight_t
    #:endfor
    #:endif


    interface trapz
        #:for k1, t1 in REAL_KINDS_TYPES
        pure module function trapz_dx_${k1}$(y, dx) result(integral)
            ${t1}$, dimension(:), intent(in) :: y
            ${t1}$, intent(in) :: dx
            ${t1}$ :: integral
        end function trapz_dx_${k1}$
        #:endfor
        #:for k1, t1 in REAL_KINDS_TYPES
        pure module function trapz_x_${k1}$(y, x) result(integral)
            ${t1}$, dimension(:), intent(in) :: y
            ${t1}$, dimension(size(y)), intent(in) :: x
            ${t1}$ :: integral
        end function trapz_x_${k1}$
        #:endfor
    end interface trapz


    interface trapz_weights
        #:for k1, t1 in REAL_KINDS_TYPES
        pure module function trapz_weights_${k1}$(x) result(w)
            ${t1}$, dimension(:), intent(in) :: x
            ${t1}$, dimension(size(x)) :: w
        end function trapz_weights_${k1}$
        #:endfor
    end interface trapz_weights


    interface simps
        ! "recursive" is an implementation detail
        #:for k1, t1 in REAL_KINDS_TYPES
        pure recursive module function simps_dx_${k1}$(y, dx, even) result(integral)
            ${t1}$, dimension(:), intent(in) :: y
            ${t1}$, intent(in) :: dx
            integer, intent(in), optional :: even
            ${t1}$ :: integral
        end function simps_dx_${k1}$
        #:endfor
        #:for k1, t1 in REAL_KINDS_TYPES
        pure recursive module function simps_x_${k1}$(y, x, even) result(integral)
            ${t1}$, dimension(:), intent(in) :: y
            ${t1}$, dimension(size(y)), intent(in) :: x
            integer, intent(in), optional :: even
            ${t1}$ :: integral
        end function simps_x_${k1}$
        #:endfor
    end interface simps


    interface simps_weights
        #:for k1, t1 in REAL_KINDS_TYPES
        pure recursive module function simps_weights_${k1}$(x, even) result(w)
            ${t1}$, dimension(:), intent(in) :: x
            integer, intent(in), optional :: even
            ${t1}$, dimension(size(x)) :: w
        end function simps_weights_${k1}$
        #:endfor
    end interface simps_weights


    ! Interface for a simple f(x)-style integrand function.
    ! Could become fancier as we learn about the performance
    ! ramifications of different ways to do callbacks.
    abstract interface
        #:for k1, t1 in REAL_KINDS_TYPES
        pure function integrand_${k1}$(x) result(f)
            import :: ${k1}$
            ${t1}$, intent(in) :: x
            ${t1}$ :: f
        end function integrand_${k1}$
        #:endfor
    end interface

#:if QUAD_OK
    ! Base class to avoid repeating kind parameter declaration.
    type, abstract :: weight_t(kind)
        integer, kind :: kind
    end type weight_t

    type, extends(weight_t) :: sin_weight_t
        real(kind) :: omega
    end type sin_weight_t

    type, extends(weight_t) :: cos_weight_t
        real(kind) :: omega
    end type cos_weight_t

    type, extends(weight_t) :: pole_weight_t
        real(kind) :: c
    end type pole_weight_t

! gfortran 9.2.0 chokes on ICE if I include this ("buffer overflow detected")
! Interestingly, though, the ICE happens while trying to build the trapz submodule
! PDT bug?
    interface quad
        #:for WFUN in WEIGHT_FUNS
        #:for k1, t1 in REAL_KINDS_TYPES
        module function quad_${WFUN}$_${k1}$(f, a, b, weight, points, abstol, reltol, delta) result(integral)
            procedure(integrand_${k1}$) :: f
            ${t1}$, intent(in) :: a
            ${t1}$, intent(in) :: b
            type(${WFUN}$_weight_t(${k1}$)), intent(in) :: weight
            ${t1}$, intent(in), dimension(:) :: points
            ${t1}$, intent(in) :: abstol
            ${t1}$, intent(in) :: reltol
            ${t1}$, intent(out), optional :: delta
            ${t1}$ :: integral
        end function quad_${WFUN}$_${k1}$
        #:endfor
        #:endfor
    end interface quad
#:endif
end module stdlib_experimental_quadrature
