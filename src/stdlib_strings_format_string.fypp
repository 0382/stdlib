#:include "common.fypp"
#:set RIL_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + LOG_KINDS_TYPES
submodule (stdlib_strings) stdlib_strings_format_string

    implicit none
    integer, parameter :: buffer_len = 512

contains


  #:for kind, type in RIL_KINDS_TYPES
    !> Format ${type}$ variable as character sequence
    module procedure format_string_${type[0]}$_${kind}$
        
        character(len=buffer_len) :: buffer
        integer :: stat

        write(buffer, optval(fmt, "(g0)"), iostat=stat) val
        if (stat == 0) then
            string = trim(buffer)
        else
            string = '*'
                !!\TODO: *?
        end if

    end procedure format_string_${type[0]}$_${kind}$

  #:endfor

  #:for kind, type in CMPLX_KINDS_TYPES
    !> Format ${type}$ variable as character sequence
    module procedure format_string_${type[0]}$_${kind}$

        string = '(' // format_string_r_${kind}$(val%re, fmt) // ',' // &
                    & format_string_r_${kind}$(val%im, fmt) // ')'

    end procedure format_string_${type[0]}$_${kind}$

  #:endfor

end submodule stdlib_strings_format_string
