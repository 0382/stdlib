#:include "common.fypp"
#:set RANKS = range(1, MAXRANK + 1)
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
submodule (stdlib_stats) stdlib_stats_linspace

  use, intrinsic:: ieee_arithmetic, only: ieee_value, ieee_quiet_nan
  use stdlib_error, only: check
  use stdlib_optval, only: optval
  implicit none

contains

  #:for k1, t1 in REAL_KINDS_TYPES
    #:set RName = rname("linspace", 1, t1, k1)
    module function ${RName}$(start, end, n) result(res)
      ${t1}$, intent(in) :: start
      ${t1}$, intent(in) :: end  
      integer, intent(in), optional :: n
        
      ${t1}$, dimension(:), allocatable :: res

      integer :: ierr ! Error status of allocation
      integer :: len  ! Length of allocated result
      integer :: i    ! Looping index
      ${t1}$ :: interval ! Difference between adjacent elements

      len = optval(n, 100)

      allocate(res(len), stat=ierr) ! Allocate result to have default 100 values            
      call check(ierr==0, msg="Error allocating res")

      if(len <= 0) return ! If passed length is less than or equal to 0, return an empty (allocated with length 0) array

      interval = (end - start) / real((len - 1), ${k1}$)

      do i = 1, len

        res(i) = real((i-1), ${k1}$) * interval + start

      end do

    end function ${RName}$
  #:endfor

end submodule