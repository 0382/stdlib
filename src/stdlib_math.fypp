#:include "common.fypp"
#:set IR_KINDS_TYPES = INT_KINDS_TYPES + REAL_KINDS_TYPES

module stdlib_math
    use stdlib_kinds, only: int8, int16, int32, int64, sp, dp, qp

    implicit none
    private
    public :: clip, linspace

    integer, parameter :: DEFAULT_LINSPACE_LENGTH = 100

    interface clip
    #:for k1, t1 in IR_KINDS_TYPES
        module procedure clip_${k1}$
    #:endfor
    end interface clip

    interface linspace 
    !! Version: Experimental
    !!
    !! Create rank 1 array of linearly spaced elements
    !! If the number of elements is not specified, create an array with size 100. If n is a negative value,
    !! return an array with size 0.
    #:for k1, t1 in REAL_KINDS_TYPES
      #:set RName = rname("linspace_default", 1, t1, k1)
      module function ${RName}$(start, end) result(res)
        ${t1}$, intent(in) :: start
        ${t1}$, intent(in) :: end  
  
        ${t1}$ :: res(DEFAULT_LINSPACE_LENGTH)        
      end function ${RName}$
    #:endfor
  
    #:for k1, t1 in REAL_KINDS_TYPES
      #:set RName = rname("linspace_n", 1, t1, k1)
      module function ${RName}$(start, end, n) result(res)
        ${t1}$, intent(in) :: start
        ${t1}$, intent(in) :: end  
        integer, intent(in) :: n
      
        ${t1}$ :: res(n)
      end function ${RName}$
    #:endfor
  end interface

contains
    
    #:for k1, t1 in IR_KINDS_TYPES
    elemental function clip_${k1}$(x, xmin, xmax) result(res)
        ${t1}$, intent(in) :: x
        ${t1}$, intent(in) :: xmin
        ${t1}$, intent(in) :: xmax
        ${t1}$ :: res

        res = max(min(x, xmax), xmin)
    end function clip_${k1}$
    
    #:endfor
end module stdlib_math
