#:include "common.fypp"
submodule(stdlib_math) stdlib_math_arange

contains

    #:for k1, t1 in REAL_KINDS_TYPES
    !> `arange` creates a vector of the `${t1}$` type 
    !>  with evenly spaced values within a given interval.
    pure module function arange_${t1[0]}$_${k1}$(start, end, by) result(result)

        ${t1}$, intent(in) :: start
        ${t1}$, intent(in), optional :: end, by
        ${t1}$, allocatable :: result(:)
        
        ${t1}$ :: start_, end_, by_
        integer :: i

        start_ = merge(start, 1.0_${k1}$, present(end))
        end_   = merge(end,   start,      present(end))
        by_    = sign(merge(merge(by, 1.0_${k1}$, by /= 0.0_${k1}$), &
                 1.0_${k1}$, present(by)), end_ - start_)

        allocate(result(floor((end_ - start_)/by_) + 1))

        result = [(start_ + (i - 1)*by_, i=1, size(result), 1)]

    end function arange_${t1[0]}$_${k1}$
    #:endfor

    #:for k1, t1 in INT_KINDS_TYPES
    !> `arange` creates a vector of the `${t1}$` type 
    !>  with evenly spaced values within a given interval.
    pure module function arange_${t1[0]}$_${k1}$(start, end, by) result(result)

        ${t1}$, intent(in) :: start
        ${t1}$, intent(in), optional :: end, by
        ${t1}$, allocatable :: result(:)
        
        ${t1}$ :: start_, end_, by_
        ${t1}$ :: i

        start_ = merge(start, 1_${k1}$, present(end))
        end_   = merge(end,   start,    present(end))
        by_    = sign(merge(merge(by, 1_${k1}$, by /= 0_${k1}$), &
                 1_${k1}$, present(by) ), end_ - start_)

        allocate(result((end_ - start_)/by_ + 1))

        result = [(i, i=start_, end_, by_)]

    end function arange_${t1[0]}$_${k1}$
    #:endfor

end submodule stdlib_math_arange
