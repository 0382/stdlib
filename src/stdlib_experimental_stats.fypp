#:include "common.fypp"

#:set RANKS = range(1, MAXRANK + 1)


module stdlib_experimental_stats
  use stdlib_experimental_kinds, only: sp, dp, qp, &
      int8, int16, int32, int64
  implicit none
  private
  ! Public API
  public :: mean

  interface mean

    #:for k1, t1 in REAL_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_all_${k1}$_${k1}$(x, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          logical, intent(in), optional :: mask
          ${t1}$ :: res
        end function mean_${rank}$_all_${k1}$_${k1}$
      #:endfor
    #:endfor

    #:for k1, t1 in INT_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_all_${k1}$_dp(x, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          logical, intent(in), optional :: mask
          real(dp) :: res
        end function mean_${rank}$_all_${k1}$_dp
      #:endfor
    #:endfor

    #:for k1, t1 in REAL_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_${k1}$_${k1}$(x, dim, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          integer, intent(in) :: dim
          logical, intent(in), optional :: mask
          ${t1}$ :: res${reduced_shape('x', rank, 'dim')}$
        end function mean_${rank}$_${k1}$_${k1}$
      #:endfor
    #:endfor

    #:for k1, t1 in INT_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_${k1}$_dp(x, dim, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          integer, intent(in) :: dim
          logical, intent(in), optional :: mask
          real(dp) :: res${reduced_shape('x', rank, 'dim')}$
        end function mean_${rank}$_${k1}$_dp
      #:endfor
    #:endfor


    #:for k1, t1 in REAL_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_mask_all_${k1}$_${k1}$(x, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          logical, intent(in) :: mask${ranksuffix(rank)}$
          ${t1}$ :: res
        end function mean_${rank}$_mask_all_${k1}$_${k1}$
      #:endfor
    #:endfor


    #:for k1, t1 in INT_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_mask_all_${k1}$_dp(x, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          logical, intent(in) :: mask${ranksuffix(rank)}$
          real(dp) :: res
        end function mean_${rank}$_mask_all_${k1}$_dp
      #:endfor
    #:endfor


    #:for k1, t1 in REAL_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_mask_${k1}$_${k1}$(x, dim, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          integer, intent(in) :: dim
          logical, intent(in) :: mask${ranksuffix(rank)}$
          ${t1}$ :: res${reduced_shape('x', rank, 'dim')}$
        end function mean_${rank}$_mask_${k1}$_${k1}$
      #:endfor
    #:endfor


    #:for k1, t1 in INT_KINDS_TYPES
      #:for rank in RANKS
        module function mean_${rank}$_mask_${k1}$_dp(x, dim, mask) result(res)
          ${t1}$, intent(in) :: x${ranksuffix(rank)}$
          integer, intent(in) :: dim
          logical, intent(in) :: mask${ranksuffix(rank)}$
          real(dp) :: res${reduced_shape('x', rank, 'dim')}$
        end function mean_${rank}$_mask_${k1}$_dp
      #:endfor
    #:endfor

  end interface mean

end module stdlib_experimental_stats
